# .github/workflows/deploy.yml - Production Deployment to Windows Server
name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual deployment

env:
  PYTHON_VERSION: '3.10'
  PROJECT_PATH: 'D:\sertifikatet'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set environment variables for testing
      run: |
        echo "TESTING=1" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "DATABASE_URL=sqlite:///:memory:" >> $GITHUB_ENV

    - name: Run basic tests
      run: |
        python -c "from app import create_app; app = create_app(); print('‚úÖ App creates successfully')"

  deploy:
    name: Deploy to Windows Production
    runs-on: self-hosted
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Stop Flask service
      shell: cmd
      continue-on-error: true
      run: |
        echo Stopping Flask service...
        nssm stop SertifikatetFlask
        timeout /t 5 /nobreak > nul

    - name: Set up Python environment
      shell: cmd
      run: |
        echo Setting up Python environment...
        cd /d "%PROJECT_PATH%"
        if exist venv (
          echo Activating existing virtual environment...
          call venv\Scripts\activate.bat
        ) else (
          echo Creating new virtual environment...
          python -m venv venv
          call venv\Scripts\activate.bat
        )

    - name: Pull latest code from repository
      shell: cmd
      run: |
        cd /d "%PROJECT_PATH%"
        echo Pulling latest code from main branch...
        git pull origin main

    - name: Install/Update dependencies
      shell: cmd
      run: |
        cd /d "%PROJECT_PATH%"
        call venv\Scripts\activate.bat
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create necessary directories
      shell: cmd
      run: |
        cd /d "%PROJECT_PATH%"
        if not exist "logs" mkdir logs
        if not exist "static\images\signs" mkdir static\images\signs
        if not exist "static\images\quiz" mkdir static\images\quiz
        if not exist "static\images\custom" mkdir static\images\custom
        if not exist "..\Backups\sertifikatet" mkdir "..\Backups\sertifikatet"

    - name: Start Flask service
      shell: cmd
      run: |
        cd /d "%PROJECT_PATH%"
        echo Starting Flask service...
        nssm start SertifikatetFlask

    - name: Verify deployment
      shell: cmd
      run: |
        echo Waiting for service to start...
        set RETRIES=12
        set COUNT=0
        :check
        curl -f http://localhost:8000/ && exit /b 0
        set /a COUNT+=1
        if %COUNT% GEQ %RETRIES% exit /b 1
        timeout /t 5 /nobreak > nul
        goto check

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.deploy.result == 'success' }}
      run: |
        echo "‚úÖ Production deployment successful!"
        echo "üåê Site available at: https://sertifikatet.no"
        
    - name: Notify failure
      if: ${{ needs.deploy.result == 'failure' }}
      run: |
        echo "‚ùå Production deployment failed!"
        echo "Check the logs for details."

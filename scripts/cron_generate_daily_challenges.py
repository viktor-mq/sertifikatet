#!/usr/bin/env python3\n# scripts/cron_generate_daily_challenges.py\n\"\"\"\nCron job script for automated daily ML challenge generation.\nRun this script daily at midnight to generate personalized challenges for all users.\n\nExample crontab entry:\n0 0 * * * /path/to/python /path/to/scripts/cron_generate_daily_challenges.py\n\"\"\"\n\nimport sys\nimport os\nfrom datetime import date, datetime\nimport logging\n\n# Add the project root to the Python path\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom app import create_app, db\nfrom app.gamification.ml_challenge_service import ml_challenge_service\nfrom app.models import User\nfrom app.gamification_models import DailyChallenge\n\n# Setup logging for cron job\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('/var/log/sertifikatet/daily_challenges.log'),\n        logging.StreamHandler(sys.stdout)\n    ]\n)\nlogger = logging.getLogger(__name__)\n\n\ndef generate_daily_challenges():\n    \"\"\"\n    Generate daily challenges for all active users.\n    \"\"\"\n    app = create_app()\n    \n    with app.app_context():\n        logger.info(\"Starting automated daily challenge generation\")\n        \n        try:\n            today = date.today()\n            \n            # Check if challenges already exist for today\n            existing_challenges = DailyChallenge.query.filter_by(\n                date=today,\n                is_active=True\n            ).count()\n            \n            if existing_challenges > 0:\n                logger.info(f\"Challenges already exist for {today} ({existing_challenges} challenges). Skipping generation.\")\n                return\n            \n            # Get active user count for logging\n            active_users_count = User.query.filter_by(is_active=True).count()\n            logger.info(f\"Generating challenges for {active_users_count} active users\")\n            \n            # Generate challenges\n            results = ml_challenge_service.generate_daily_challenges_for_all_users(today)\n            \n            # Log results\n            logger.info(f\"Challenge generation completed: {results}\")\n            \n            if results['errors'] > 0:\n                logger.warning(f\"Encountered {results['errors']} errors during generation\")\n            \n            # Log success metrics\n            total_generated = results['generated']\n            ml_generated = results['ml_generated']\n            fallback_generated = results['fallback_generated']\n            \n            if total_generated > 0:\n                ml_percentage = (ml_generated / total_generated) * 100\n                logger.info(f\"Generation success: {total_generated} challenges created\")\n                logger.info(f\"ML vs Fallback: {ml_generated} ML ({ml_percentage:.1f}%), {fallback_generated} fallback\")\n            else:\n                logger.error(\"No challenges were generated - investigation required\")\n            \n            # Send summary to admin (optional)\n            if os.getenv('SEND_ADMIN_SUMMARY', 'false').lower() == 'true':\n                send_admin_summary(results, today)\n            \n            logger.info(\"Daily challenge generation completed successfully\")\n            \n        except Exception as e:\n            logger.error(f\"Fatal error during challenge generation: {e}\", exc_info=True)\n            \n            # Send error notification (optional)\n            if os.getenv('SEND_ERROR_ALERTS', 'false').lower() == 'true':\n                send_error_alert(str(e))\n            \n            # Re-raise for monitoring systems\n            raise\n\n\ndef send_admin_summary(results, date):\n    \"\"\"\n    Send summary email to administrators (if configured).\n    \"\"\"\n    try:\n        from app.utils.email import send_email\n        \n        admin_email = os.getenv('ADMIN_EMAIL')\n        if not admin_email:\n            return\n        \n        subject = f\"Daily Challenge Generation Summary - {date}\"\n        \n        html_body = f\"\"\"\n        <h2>Daily Challenge Generation Report</h2>\n        <p><strong>Date:</strong> {date}</p>\n        <p><strong>Total Challenges Created:</strong> {results['generated']}</p>\n        <p><strong>ML-Generated:</strong> {results['ml_generated']}</p>\n        <p><strong>Fallback Challenges:</strong> {results['fallback_generated']}</p>\n        <p><strong>Errors:</strong> {results['errors']}</p>\n        \n        {'<p style=\"color: green;\">‚úÖ Generation completed successfully</p>' if results['errors'] == 0 else '<p style=\"color: orange;\">‚ö†Ô∏è Some errors occurred during generation</p>'}\n        \n        <hr>\n        <p><em>Automated daily challenge generation system</em></p>\n        \"\"\"\n        \n        send_email(\n            to=admin_email,\n            subject=subject,\n            html_body=html_body\n        )\n        \n        logger.info(f\"Sent admin summary to {admin_email}\")\n        \n    except Exception as e:\n        logger.error(f\"Failed to send admin summary: {e}\")\n\n\ndef send_error_alert(error_message):\n    \"\"\"\n    Send error alert email to administrators.\n    \"\"\"\n    try:\n        from app.utils.email import send_email\n        \n        admin_email = os.getenv('ADMIN_EMAIL')\n        if not admin_email:\n            return\n        \n        subject = f\"üö® Daily Challenge Generation Failed - {date.today()}\"\n        \n        html_body = f\"\"\"\n        <h2 style=\"color: red;\">Daily Challenge Generation Error</h2>\n        <p><strong>Date:</strong> {date.today()}</p>\n        <p><strong>Time:</strong> {datetime.now()}</p>\n        \n        <h3>Error Details:</h3>\n        <pre style=\"background: #f5f5f5; padding: 10px; border-radius: 4px;\">{error_message}</pre>\n        \n        <p><strong>Action Required:</strong> Please check the application logs and fix the issue to ensure challenges are generated for tomorrow.</p>\n        \n        <hr>\n        <p><em>Automated error alert from daily challenge generation system</em></p>\n        \"\"\"\n        \n        send_email(\n            to=admin_email,\n            subject=subject,\n            html_body=html_body\n        )\n        \n        logger.info(f\"Sent error alert to {admin_email}\")\n        \n    except Exception as e:\n        logger.error(f\"Failed to send error alert: {e}\")\n\n\ndef cleanup_old_challenges():\n    \"\"\"\n    Optional cleanup of old challenges to prevent database bloat.\n    Removes challenges older than 30 days.\n    \"\"\"\n    app = create_app()\n    \n    with app.app_context():\n        try:\n            cleanup_date = date.today() - timedelta(days=30)\n            \n            # Count challenges to be deleted\n            old_challenges = DailyChallenge.query.filter(\n                DailyChallenge.date < cleanup_date\n            ).count()\n            \n            if old_challenges > 0:\n                logger.info(f\"Cleaning up {old_challenges} old challenges (older than {cleanup_date})\")\n                \n                # Delete old challenges (this will cascade to user_daily_challenges)\n                DailyChallenge.query.filter(\n                    DailyChallenge.date < cleanup_date\n                ).delete()\n                \n                db.session.commit()\n                logger.info(f\"Successfully cleaned up {old_challenges} old challenges\")\n            else:\n                logger.info(\"No old challenges to clean up\")\n                \n        except Exception as e:\n            logger.error(f\"Error during challenge cleanup: {e}\")\n            db.session.rollback()\n\n\ndef health_check():\n    \"\"\"\n    Perform basic health checks before running challenge generation.\n    \"\"\"\n    app = create_app()\n    \n    with app.app_context():\n        try:\n            # Check database connectivity\n            User.query.first()\n            \n            # Check ML service\n            ml_status = ml_challenge_service.ml_service.is_ml_enabled()\n            \n            # Check active users\n            active_users = User.query.filter_by(is_active=True).count()\n            \n            logger.info(f\"Health check passed: DB ‚úÖ, ML {'‚úÖ' if ml_status else '‚ö†Ô∏è'}, Users: {active_users}\")\n            \n            return True\n            \n        except Exception as e:\n            logger.error(f\"Health check failed: {e}\")\n            return False\n\n\nif __name__ == '__main__':\n    import argparse\n    \n    parser = argparse.ArgumentParser(description='Generate daily challenges')\n    parser.add_argument(\n        '--cleanup', \n        action='store_true', \n        help='Also cleanup old challenges'\n    )\n    parser.add_argument(\n        '--health-check', \n        action='store_true', \n        help='Run health check only'\n    )\n    parser.add_argument(\n        '--force', \n        action='store_true', \n        help='Force generation even if challenges exist'\n    )\n    \n    args = parser.parse_args()\n    \n    if args.health_check:\n        success = health_check()\n        sys.exit(0 if success else 1)\n    \n    try:\n        # Run health check first\n        if not health_check():\n            logger.error(\"Health check failed - aborting challenge generation\")\n            sys.exit(1)\n        \n        # Force generation by clearing existing challenges if requested\n        if args.force:\n            app = create_app()\n            with app.app_context():\n                today = date.today()\n                existing = DailyChallenge.query.filter_by(\n                    date=today,\n                    is_active=True\n                ).delete()\n                db.session.commit()\n                logger.info(f\"Force mode: deleted {existing} existing challenges for {today}\")\n        \n        # Generate challenges\n        generate_daily_challenges()\n        \n        # Cleanup old challenges if requested\n        if args.cleanup:\n            cleanup_old_challenges()\n        \n        logger.info(\"Cron job completed successfully\")\n        \n    except Exception as e:\n        logger.error(f\"Cron job failed: {e}\")\n        sys.exit(1)\n